#include <stdio.h>
#include <stdlib.h>
#include <zlib.h> // for crc32 method
#include <pthread.h>
#include "linkedList.h"
#include <string.h>
#include <time.h>

#define NUM_OF_MINER 4
#define NUM_OF_ZERO 16
#define MAX_STRING_SIZE 256
#define MASK 0xffff0000

// Functions Declaration
void print_list();

void print_block(BLOCK_T *block);

void delete_list();

unsigned long generateHashFromBlock(BLOCK_T *block);

void updateNonceAndTimestamp(BLOCK_T *block, int nonce);

BLOCK_T *generateMinerBlock(int relayed_by, unsigned long prev_hash, int height);

void generateInitBlock();

void *server(void *pVoid);

void updateMinerBlock(int *thread_id, BLOCK_T *minerBlock);

void *miner(int *thread_id);

void createMiners();

void createServer();

void createThreads();

int isLegalBlock();

pthread_t miners[NUM_OF_MINER];
pthread_t server_thread;
int indices[NUM_OF_MINER];
BLOCK_T *newBlock = NULL;

node_t *block_chain_head = NULL;
int minersWaiting = 0;

pthread_mutex_t miner_lock;
pthread_mutex_t chain_lock;

pthread_cond_t chain_up_to_date;
pthread_cond_t new_block_cond;
pthread_cond_t waitForServer;


int main()
{
    pthread_mutex_init(&miner_lock, NULL);
    pthread_mutex_init(&chain_lock, NULL);

    pthread_cond_init(&chain_up_to_date, NULL);
    pthread_cond_init(&new_block_cond, NULL);
    pthread_cond_init(&waitForServer, NULL);


    createThreads();
    //createServer();
    //createMiners();

    return 0;
}

void createMiners()
{
    int i = 0;

    for (int i = 0; i < NUM_OF_MINER; i++)
    {
        indices[i] = i;
        pthread_create(&miners[i], NULL, (void *(*)(void *))miner, (void *)&indices[i]);
    }

    for (i = 0; i < NUM_OF_MINER; i++)
        pthread_join(miners[i], NULL);
}

void createServer()
{
    pthread_create(&server_thread, NULL, server, NULL);
    pthread_join(server_thread, NULL);
}

void createThreads()
{
    int i = 0;

    for (i = 0; i < NUM_OF_MINER; i++)
    {
        indices[i] = i;
        pthread_create(&miners[i], NULL, (void *(*)(void *))miner, (void *)&indices[i]);
    }

    pthread_create(&server_thread, NULL, server, NULL);
    pthread_join(server_thread, NULL);

    for (i = 0; i < NUM_OF_MINER; i++)
        pthread_join(miners[i], NULL);
}

void generateInitBlock()
{
    node_t *head_node_list = malloc(sizeof(node_t));
    BLOCK_T *first_block = malloc(sizeof(BLOCK_T));
    first_block->height = 0;
    first_block->timestamp = (int)time(NULL); // current time in seconds
    first_block->relayed_by = -1;             // server id
    first_block->nonce = 0;                   // dummy nonce
    first_block->prev_hash = 0;               // dummy prev hash
    first_block->hash = 0;                    // dummy hash
    first_block->difficulty = NUM_OF_ZERO;

    head_node_list->prev = NULL;
    head_node_list->block = first_block;
    block_chain_head = head_node_list; // init head of list
}

BLOCK_T *generateMinerBlock(int relayed_by, unsigned long prev_hash, int height)
{
    BLOCK_T *new_block = malloc(sizeof(BLOCK_T));
    new_block->height = height;
    new_block->timestamp = (int)time(NULL); // current time in seconds
    new_block->relayed_by = relayed_by;     // server id
    new_block->nonce = 0;                   // dummy nonce
    new_block->prev_hash = prev_hash;       // dummy prev hash
    new_block->hash = 0;                    // dummy hash
    new_block->difficulty = NUM_OF_ZERO;

    return new_block;
}

void updateNonceAndTimestamp(BLOCK_T *block, int nonce)
{
    block->nonce = nonce;
    block->timestamp = (int)time(NULL);
}

unsigned long generateHashFromBlock(BLOCK_T *block)
{
    char block_to_string[MAX_STRING_SIZE];
    sprintf(block_to_string, "%d,%d,%d,%d,%d,%lu",
            block->timestamp, block->nonce, block->height,
            block->relayed_by, block->difficulty, block->prev_hash);
    return crc32(0, (const void *)block_to_string, (uInt)strlen(block_to_string));
}

void print_list()
{
    node_t *current = block_chain_head->prev;
    print_block(block_chain_head->block);

    while (current != NULL)
    {
        printf("      |\n");
        printf("      |\n");
        printf("      V\n");
        BLOCK_T *temp_block = current->block;
        print_block(temp_block);

        current = current->prev;
    }
}

void print_block(BLOCK_T *block)
{
    printf("height(%d), timestamp(%d), hash(%08x), prev_hash(%08x), difficulty(%d), nonce(%d)\n",
           block->height, block->timestamp,(unsigned int)block->hash, (unsigned int)block->prev_hash,block->difficulty, block->nonce);
}

void delete_list()
{
    node_t *node;
    while (block_chain_head)
    {
        free(block_chain_head->block);
        node = block_chain_head;
        block_chain_head = block_chain_head->prev;
        free(node);
    }
}

int isLegalBlock()
{
    unsigned long hash = generateHashFromBlock(newBlock);
    if(hash != newBlock->hash){
        printf("wrong hash for block #%d by miner %d, received %08x but calculate %08x\n",newBlock->height, newBlock->relayed_by, (unsigned int) newBlock->hash, (unsigned int) hash);
        return 0;
    }
    int height = block_chain_head->block->height;
    if(height + 1 != newBlock->height){
        printf("wrong height for block by miner %d, received %d but supposed to be %d\n", newBlock->relayed_by, newBlock->height, height + 1);
        return 0;
    }

    return 1;
}

void *server(void *pVoid)
{
    //printf("Server: thread started\n");
    pthread_mutex_lock(&chain_lock);
    printf("Server: waiting for waitForServer init\n");
    pthread_cond_wait(&waitForServer, &chain_lock);
    minersWaiting = 0;
    printf("Server: done waiting for waitForServer init\n");
    generateInitBlock();
    //printf("Server: chain init\n");

    pthread_cond_broadcast(&chain_up_to_date);
    pthread_mutex_unlock(&chain_lock);

    for (;;)
    {

        pthread_mutex_lock(&chain_lock);

        if (newBlock != NULL)
        {
            if (isLegalBlock())
            {
                printf("Server: waiting for waitForServer\n");
                pthread_cond_wait(&waitForServer, &chain_lock);
                pthread_mutex_lock(&miner_lock);
                minersWaiting = 0;
                printf("Server: get signal for waitForServer\n");

                push(&block_chain_head, &newBlock);
                printf("Server: New block add by %d, attributes:",newBlock->relayed_by);

                print_block(newBlock);
                pthread_mutex_unlock(&miner_lock);
                // printf("Server: chain up to date\n");
                // printf("\nServer: The Chain:\n");

                //print_list();
                // printf("--------------------------------------------\n\n");
            }
    

            newBlock = NULL;
            pthread_cond_broadcast(&chain_up_to_date);
        }
        else
        {
            printf("Server: waiting for new_block_cond\n");
            pthread_cond_wait(&new_block_cond, &chain_lock);
            printf("Server: done waiting\n");
        }

        pthread_mutex_unlock(&chain_lock);
    }

    //delete_list();
    return NULL;
}

void updateMinerBlock(int *thread_id, BLOCK_T *minerBlock)
{
    minerBlock->nonce = rand();
    minerBlock->timestamp = (int)time(NULL); // current time
    minerBlock->hash = generateHashFromBlock(minerBlock);
}

void *miner(int *thread_id)
{
    // printf("Miner #%d: thread started\n", *thread_id);

    BLOCK_T *minerBlock = NULL;
    unsigned long newHash = 0;

    for (;;)
    {
        pthread_mutex_lock(&miner_lock);

        if (newBlock == NULL && minerBlock != NULL)
        {
            updateMinerBlock(thread_id, minerBlock);

            if ((minerBlock->hash & MASK) == 0)
            {
                pthread_mutex_lock(&chain_lock);
                newBlock = minerBlock;

                printf("Miner #%d: Mined a new block #%d, with the hash %08x\n", minerBlock->relayed_by, minerBlock->height,(unsigned int)minerBlock->hash);

                pthread_mutex_unlock(&chain_lock);
                pthread_cond_signal(&new_block_cond); //sent server signal there is a new block to add
            }
        }
        else
        {
            minersWaiting++;
            printf("Miner %d: minersWaiting %d\n", *thread_id, minersWaiting);

            if(minersWaiting == 4)
                pthread_cond_signal(&waitForServer);

            printf("Miner %d: waiting\n", *thread_id);
            pthread_cond_wait(&chain_up_to_date, &miner_lock); // wait until server add new block

            pthread_mutex_lock(&chain_lock);
            minerBlock = generateMinerBlock(*thread_id + 1, block_chain_head->block->hash, block_chain_head->block->height + 1); //get the new block
            pthread_mutex_unlock(&chain_lock);
        }

        pthread_mutex_unlock(&miner_lock);
    }
    return NULL;
}